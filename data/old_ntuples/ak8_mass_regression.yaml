treename:
    Events

selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    >
    (fj_pt>200) &
    (fj_pt<1500) &
    (fj_genjetmass<260) &
    ( ( ( (fj_isQCDb==1) |
     (fj_isQCDbb==1) |
     (fj_isQCDc==1) |
     (fj_isQCDcc==1) |
     (fj_isQCDothers == 1) ) & (fj_genRes_mass<=0) ) |
     ((fj_H_VV_elenuqq==1) | (fj_H_VV_munuqq==1) | (fj_H_VV_leptauelvqq==1) | (fj_H_VV_leptaumuvqq==1) ) &
     ((fj_nprongs>1) & (fj_genRes_mass>0) ) )

new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    target_mass: np.maximum(1, np.where(fj_genRes_mass>0, fj_genRes_mass, fj_msoftdrop))
    fj_H_VV_taunuqq: (fj_H_VV_leptauelvqq) | (fj_H_VV_leptaumuvqq)
    fj_QCD_label: (fj_isQCDb==1) | (fj_isQCDbb==1) | (fj_isQCDc==1) | (fj_isQCDcc==1) | (fj_isQCDothers==1)
    fj_sig_label: ((fj_H_VV_elenuqq==1) | (fj_H_VV_munuqq==1) | (fj_H_VV_taunuqq==1))

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction:

inputs:
   pf_points:
      length: 100
      vars:
         - pfcand_etarel
         - pfcand_phirel
   pf_features:
      length: 100
      vars:
         - [pfcand_pt_log_nopuppi, 1, 0.5]
         - [pfcand_e_log_nopuppi, 1.3, 0.5]
         - pfcand_etarel
         - pfcand_phirel
         - [pfcand_abseta, 0.6, 1.6]
         - pfcand_charge
         - pfcand_isEl
         - pfcand_isMu
         - pfcand_isGamma
         - pfcand_isChargedHad
         - pfcand_isNeutralHad
         - [pfcand_VTX_ass, 4, 0.3]
         - pfcand_lostInnerHits
         - [pfcand_normchi2, 5, 0.2]
         - [pfcand_quality, 0, 0.2]
         - [pfcand_dz, 0, 180]
         - [pfcand_dzsig, 0, 0.9]
         - [pfcand_dxy, 0.0, 300]
         - [pfcand_dxysig, 0, 1.0]

   pf_mask:
      length: 100
      vars:
         - pfcand_mask
   sv_points:
      length: 7
      vars:
         - sv_etarel
         - sv_phirel
   sv_features:
      length: 7
      vars:
         - [sv_pt_log, 4, 0.6]
         - [sv_mass, 1.2, 0.3]
         - sv_etarel
         - sv_phirel
         - [sv_abseta, 0.5, 1.6]
         - [sv_ntracks, 3, 1]
         - [sv_normchi2, 0.8, 0.6]
         - [sv_dxy, 0.4, 0.25]
         - [sv_dxysig, 7, 0.02]
         - [sv_d3d, 0.5, 0.2]
         - [sv_d3dsig, 7, 0.02]
   sv_mask:
      length: 7
      vars:
         - sv_mask

labels:
    ### type can be `simple`, `custom`
    ### use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
    # type: simple
    # value: [
    #     fj_QCD_label,
    #     fj_isHVV_elenuqq, fj_isHVV_munuqq, fj_isHVV_taunuqq
    # ]   # just qcd and 3 signal ele,mu,tau classes... but reweighting just signal vs qcd (2)

   type: custom
   value:
      target_mass: np.maximum(1, np.where(fj_genRes_mass>0, fj_genRes_mass, fj_genjetmsd))

observers:
   - fj_pt
   - fj_eta
   - fj_phi
   - fj_mass
   - fj_msoftdrop
   - fj_genjetmass
   - fj_genjetmass
   - fj_genRes_mass
   - fj_genRes_pt
   - fj_isQCDb
   - fj_isQCDbb
   - fj_isQCDc
   - fj_isQCDcc
   - fj_isQCDothers
   - fj_H_VV_elenuqq
   - fj_H_VV_munuqq
   - fj_H_VV_taunuqq
   - fj_nprongs
   - met_relpt
   - met_relphi

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      fj_pt: [200, 250, 313, 391, 490, 613, 766, 959, 1199, 1500]
      fj_genjetmass: [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144, 150, 156, 162, 168, 174, 180, 192, 198, 204, 210, 216, 222, 228, 234, 240, 246, 252, 258]
   # reweight_classes: [fj_isQCDb, fj_isQCDbb, fj_isQCDc, fj_isQCDcc, fj_isQCDothers, fj_H_VV_4q, fj_H_VV_elenuqq, fj_H_VV_munuqq, fj_H_VV_taunuqq]
### TO DO: change reweight
   # class_weights: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
   reweight_classes:
       [
       fj_QCD_label,
       fj_sig_label,
       ]
   class_weights:
       [
       1.0,
       1.0,
       ]
   #
   # reweight_threshold: 15
   # reweight_hists:
